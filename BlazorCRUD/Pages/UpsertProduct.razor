@page "/product"
@page "/product/{id:int}"
@inject ProductService _ProductService

@if (Id == null)
{
    <h3>Create a new product</h3>
}
else
{
    <h3>Edit "@product.Name"</h3>
}

<EditForm Model="product" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="developer">Description</label>
        <InputText id="developer" @bind-Value="product.Description" class="form-control"></InputText>
    </div>
    <div>
        <label for="Price">Price</label>
        <InputNumber id="Price" @bind-Value="product.Price" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id != null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteProduct">Delete Product</button>
    }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Product product = new Product();

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save New Product" : "Update Product";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            product = await _ProductService.GetSingleProduct((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await _ProductService.CreateProduct(product);
        }
        else
        {
            await _ProductService.UpdateProduct(product, (int)Id);
        }
    }

    async Task DeleteProduct()
    {
        await _ProductService.DeleteProduct(product.Id);
    }
}
